"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
// Folder imports:
const abort_expression_1 = require("./abort_expression");
const annotation_expression_1 = require("./annotation_expression");
const assign_expression_1 = require("./assign_expression");
const binary_expression_1 = require("./binary_expression");
const block_item_1 = require("./block_item");
const block_1 = require("./block");
const borrow_expression_1 = require("./borrow_expression");
const break_expression_1 = require("./break_expression");
const call_expression_1 = require("./call_expression");
const cast_expression_1 = require("./cast_expression");
const continue_expression_1 = require("./continue_expression");
const dereference_expression_1 = require("./dereference_expression");
const dot_expression_1 = require("./dot_expression");
const expression_list_1 = require("./expression_list");
const if_expression_1 = require("./if_expression");
const identified_expression_1 = require("./identified_expression");
const index_expression_1 = require("./index_expression");
const lambda_expression_1 = require("./lambda_expression");
const let_statement_1 = require("./let_statement");
const loop_expression_1 = require("./loop_expression");
const macro_call_expression_1 = require("./macro_call_expression");
const match_expression_1 = require("./match_expression");
const move_or_copy_expression_1 = require("./move_or_copy_expression");
const name_expression_1 = require("./name_expression");
const pack_expression_1 = require("./pack_expression");
const return_expression_1 = require("./return_expression");
const unary_expression_1 = require("./unary_expression");
const unit_expression_1 = require("./unit_expression");
const vector_expression_1 = require("./vector_expression");
const while_expression_1 = require("./while_expression");
function default_1(path) {
    // route to separated functions
    const result = (0, abort_expression_1.default)(path) ||
        (0, annotation_expression_1.default)(path) ||
        (0, assign_expression_1.default)(path) ||
        (0, binary_expression_1.default)(path) ||
        (0, block_item_1.default)(path) ||
        (0, block_1.default)(path) ||
        (0, borrow_expression_1.default)(path) ||
        (0, break_expression_1.default)(path) ||
        (0, call_expression_1.default)(path) ||
        (0, cast_expression_1.default)(path) ||
        (0, continue_expression_1.default)(path) ||
        (0, dereference_expression_1.default)(path) ||
        (0, dot_expression_1.default)(path) ||
        (0, expression_list_1.default)(path) ||
        (0, if_expression_1.default)(path) ||
        (0, identified_expression_1.default)(path) ||
        (0, index_expression_1.default)(path) ||
        (0, lambda_expression_1.default)(path) ||
        (0, let_statement_1.default)(path) ||
        (0, loop_expression_1.default)(path) ||
        (0, macro_call_expression_1.default)(path) ||
        (0, match_expression_1.default)(path) ||
        (0, move_or_copy_expression_1.default)(path) ||
        (0, name_expression_1.default)(path) ||
        (0, pack_expression_1.default)(path) ||
        (0, return_expression_1.default)(path) ||
        (0, unary_expression_1.default)(path) ||
        (0, unit_expression_1.default)(path) ||
        (0, vector_expression_1.default)(path) ||
        (0, while_expression_1.default)(path);
    if (result !== null) {
        return result;
    }
    return null;
}
//# sourceMappingURL=index.js.map