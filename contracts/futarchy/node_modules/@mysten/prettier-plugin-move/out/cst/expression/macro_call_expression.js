"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const prettier_1 = require("prettier");
const utilities_1 = require("../../utilities");
const { group, indentIfBreak, line, softline, ifBreak, join } = prettier_1.doc.builders;
/** The type of the node implemented in this file */
const NODE_TYPE = 'macro_call_expression';
function default_1(path) {
    if (path.node.type === NODE_TYPE) {
        return printMacroCallExpression;
    }
    return null;
}
/**
 * Print `macro_call_expression` node.
 * Inside:
 * - `macro_module_access`
 * - `type_arguments`
 * - `arg_list`
 */
function printMacroCallExpression(path, options, print) {
    return path.map((path) => {
        if (path.node.type === 'macro_module_access') {
            return printMacroModuleAccess(path, options, print);
        }
        if (path.node.type === 'arg_list') {
            return printMacroArgsList(path, options, print);
        }
        return print(path);
    }, 'nonFormattingChildren');
}
/**
 * Print `macro_module_access` node.
 * Inside:
 * - `module_access`
 * - `!`
 */
function printMacroModuleAccess(path, options, print) {
    return [path.call(print, 'nonFormattingChildren', 0), '!'];
}
/**
 * Special function to print macro arguments list instead of `arg_list`.
 */
function printMacroArgsList(path, options, print) {
    if (path.node.type !== 'arg_list') {
        throw new Error('Expected `arg_list` node');
    }
    if (path.node.namedChildCount === 0) {
        return '()';
    }
    const groupId = Symbol('macro_args_list');
    return group((0, utilities_1.list)({
        path,
        options,
        print,
        open: '(',
        close: ')',
        addWhitespace: false,
        shouldBreak: false,
        indentGroup: groupId,
    }), { id: groupId });
}
//# sourceMappingURL=macro_call_expression.js.map