"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.NODE_TYPE = void 0;
exports.default = default_1;
const prettier_1 = require("prettier");
const utilities_1 = require("../../utilities");
const { group, indent, line } = prettier_1.doc.builders;
/** The type of the node implemented in this file */
exports.NODE_TYPE = 'assign_expression';
function default_1(path) {
    if (path.node.type === exports.NODE_TYPE) {
        return printAssignExpression;
    }
    return null;
}
/**
 * Print `assign_expression` node.
 */
function printAssignExpression(path, options, print) {
    if (path.node.nonFormattingChildren.length !== 2) {
        throw new Error('`assign_expression` must have 2 children');
    }
    const result = [];
    let shouldBreak = false;
    // together with the LHS we print trailing comment if there is one
    result.push(path.call((lhs) => {
        const hasComment = !!lhs.node.trailingComment;
        if (lhs.node.trailingComment?.type == 'line_comment') {
            shouldBreak = true;
            const trailingLineComment = (0, utilities_1.printTrailingComment)(lhs, true);
            lhs.node.disableTrailingComment();
            return [print(lhs), ' =', indent(trailingLineComment)];
        }
        return [print(lhs), hasComment ? '=' : ' ='];
    }, 'nonFormattingChildren', 0));
    const rhs = path.node.nonFormattingChildren[1];
    if ((rhs.isControlFlow || rhs.isList) && !shouldBreak) {
        result.push(group([' ', path.call(print, 'nonFormattingChildren', 1)]));
    }
    else {
        // then print the rhs
        result.push(group([
            shouldBreak ? '' : indent(line),
            indent(path.call(print, 'nonFormattingChildren', 1)),
        ]));
    }
    return result;
}
//# sourceMappingURL=assign_expression.js.map