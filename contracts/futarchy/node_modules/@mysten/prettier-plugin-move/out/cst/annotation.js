"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.Annotation = void 0;
exports.default = default_1;
exports.printAnnotation = printAnnotation;
exports.printAnnotationItem = printAnnotationItem;
exports.printAnnotationList = printAnnotationList;
exports.printAnnotationExpr = printAnnotationExpr;
const prettier_1 = require("prettier");
const utilities_1 = require("../utilities");
const { group, join } = prettier_1.doc.builders;
var Annotation;
(function (Annotation) {
    Annotation["Annotation"] = "annotation";
    Annotation["AnnotationItem"] = "annotation_item";
    Annotation["AnnotationList"] = "annotation_list";
    Annotation["AnnotationExpr"] = "annotation_expr";
})(Annotation || (exports.Annotation = Annotation = {}));
function default_1(path) {
    switch (path.node.type) {
        case Annotation.Annotation:
            return printAnnotation;
        case Annotation.AnnotationItem:
            return printAnnotationItem;
        case Annotation.AnnotationList:
            return printAnnotationList;
        case Annotation.AnnotationExpr:
            return printAnnotationExpr;
    }
    return null;
}
/**
 * Print `annotation` node.
 */
function printAnnotation(path, options, print) {
    return group(['#', (0, utilities_1.list)({ path, print, options, open: '[', close: ']' })]);
}
/**
 * Print `annotation_item` node.
 */
function printAnnotationItem(path, _opt, print) {
    return path.map(print, 'nonFormattingChildren');
}
function printAnnotationList(path, options, print) {
    return [
        path.call(print, 'nonFormattingChildren', 0),
        (0, utilities_1.list)({ path, print, options, open: '(', close: ')', skipChildren: 1 }),
    ];
}
/**
 * Print `annotation_expr` node.
 */
function printAnnotationExpr(path, _opt, print) {
    // allow `::module::Expression` in annotations
    return join(' = ', path.map((path) => {
        if (path.node.type === 'module_access' && path.node.previousSibling?.type == '::') {
            return ['::', path.call(print)];
        }
        return path.call(print);
    }, 'nonFormattingChildren'));
}
//# sourceMappingURL=annotation.js.map