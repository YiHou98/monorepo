"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
exports.printNonBreakingBlock = printNonBreakingBlock;
exports.printBreakableBlock = printBreakableBlock;
exports.printBlock = printBlock;
const prettier_1 = require("prettier");
const utilities_1 = require("../../utilities");
const { group, indent, join, conditionalGroup, hardlineWithoutBreakParent } = prettier_1.doc.builders;
/** The type of the node implemented in this file */
const NODE_TYPE = 'block';
function default_1(path) {
    if (path.node.type === NODE_TYPE) {
        return printBlock;
    }
    return null;
}
/**
 * Special case of `block` node, that does not break the parent. A must-have for
 * lambda expressions.
 */
function printNonBreakingBlock(path, options, print) {
    const length = path.node.nonFormattingChildren.length;
    if (length == 0) {
        return '{}';
    }
    return group([
        '{',
        indent(hardlineWithoutBreakParent),
        indent(join(hardlineWithoutBreakParent, path.map(print, 'namedAndEmptyLineChildren'))),
        hardlineWithoutBreakParent,
        '}',
    ]);
}
function printBreakableBlock(path, options, print) {
    const length = path.node.nonFormattingChildren.length;
    if (length == 0) {
        return '{}';
    }
    return (0, utilities_1.block)({
        options,
        print,
        path,
        shouldBreak: (0, utilities_1.shouldBreakFirstChild)(path),
    });
}
/**
 * Print `block` node.
 */
function printBlock(path, options, print) {
    return conditionalGroup([
        printBreakableBlock(path, options, print),
        printNonBreakingBlock(path, options, print),
    ]);
}
//# sourceMappingURL=block.js.map