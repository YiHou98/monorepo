"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.UseDeclaration = void 0;
exports.default = default_1;
exports.printUseDeclaration = printUseDeclaration;
exports.printUseFun = printUseFun;
exports.printFriendDeclaration = printFriendDeclaration;
exports.printFriendAccess = printFriendAccess;
exports.printUseModule = printUseModule;
exports.printUseMember = printUseMember;
exports.printUseModuleMember = printUseModuleMember;
exports.printUseModuleMembers = printUseModuleMembers;
exports.printModuleIdentity = printModuleIdentity;
exports.isUseImport = isUseImport;
const prettier_1 = require("prettier");
const { group, indent, line, softline, ifBreak, join } = prettier_1.doc.builders;
function default_1(path) {
    switch (path.node.type) {
        case UseDeclaration.UseDeclaration:
            return printUseDeclaration;
        case UseDeclaration.UseModule:
            return printUseModule;
        case UseDeclaration.UseMember:
            return printUseMember;
        case UseDeclaration.UseModuleMember:
            return printUseModuleMember;
        case UseDeclaration.UseModuleMembers:
            return printUseModuleMembers;
        case UseDeclaration.UseFun:
            return printUseFun;
        case UseDeclaration.ModuleIdentity:
            return printModuleIdentity;
        case UseDeclaration.FriendDeclaration:
            return printFriendDeclaration;
        case UseDeclaration.FriendAccess:
            return printFriendAccess;
        default:
            return null;
    }
}
/**
 * Use Declaration
 *
 * Contains one of the following:
 *
 * `use_declaration` (
 * - use `use_module` <as `alias`>;
 * - use `use_module_member` <as `use_member`>;
 * - use `use_module_members`;
 * - use `use_fun`;
 * )
 *
 * `use_member` (
 * - `identifier` <as `alias`>;
 * )
 */
var UseDeclaration;
(function (UseDeclaration) {
    /**
     * Module-level definition
     * ```
     * `<public> use ...;
     * ```
     */
    UseDeclaration["UseDeclaration"] = "use_declaration";
    UseDeclaration["FriendDeclaration"] = "friend_declaration";
    UseDeclaration["FriendAccess"] = "friend_access";
    UseDeclaration["UseFun"] = "use_fun";
    // all of the nodes below are implemented in `import-grouping.ts`
    // hence should never be printed directly.
    UseDeclaration["UseModule"] = "use_module";
    UseDeclaration["UseMember"] = "use_member";
    UseDeclaration["UseModuleMember"] = "use_module_member";
    UseDeclaration["UseModuleMembers"] = "use_module_members";
    UseDeclaration["ModuleIdentity"] = "module_identity";
})(UseDeclaration || (exports.UseDeclaration = UseDeclaration = {}));
/**
 * Print @see `UseDeclaration.UseDeclaration` node.
 */
function printUseDeclaration(path, options, print) {
    const firstChild = path.node.child(0);
    const isPublic = firstChild && firstChild.type === 'public' ? ['public', ' '] : [];
    return [
        ...isPublic, // insert `public` keyword if present
        'use ',
        path.call(print, 'nonFormattingChildren', 0),
        ';',
    ];
}
/**
 * Print `use_fun` node `module_access` as `module_access`.`function_identifier`
 */
function printUseFun(path, options, print) {
    return group([
        'fun ',
        path.call(print, 'nonFormattingChildren', 0), // module_access
        ' as',
        indent(line),
        path.call(print, 'nonFormattingChildren', 1), // module_access
        '.',
        path.call(print, 'nonFormattingChildren', 2), // function_identifier
    ]);
}
/**
 * Print `friend_declaration` node.
 */
function printFriendDeclaration(path, options, print) {
    return group([
        'friend',
        indent(line),
        path.call(print, 'nonFormattingChildren', 0), // module_access
        ';',
    ]);
}
/**
 * Print `friend_access` node.
 */
function printFriendAccess(path, options, print) {
    return path.map(print, 'nonFormattingChildren');
}
/**
 * Print `use_module` node. `module_name`
 * Currently only used for `use` with annotations.
 */
function printUseModule(path, options, print) {
    return path.map((e) => {
        if (e.node.type == 'as')
            return ' as ';
        return print(e);
    }, 'children');
}
/**
 * Print `use_member` node. `member_name`
 * Currently only used for `use` with annotations.
 */
function printUseMember(path, options, print) {
    const isGroup = path.node.children.findIndex((e) => e.type == '{');
    // not found `::{...}`
    if (isGroup == -1) {
        return group(path.map((e) => {
            if (e.node.type == 'as')
                return ' as ';
            if (e.node.type == ',')
                return [',', line];
            return print(e);
        }, 'children'));
    }
    const children = path.map(print, 'nonFormattingChildren');
    return group([
        children[0],
        '::{',
        indent(softline),
        indent(join([',', line], children.slice(1))),
        ifBreak(','), // trailing comma
        softline,
        '}',
    ]);
}
/**
 * Print `use_module_member` node. `module_name::member_name`
 * Single statement of direct import;
 * `use address::module_name::member_name;`
 *
 * Wraps the member into a group `{}` if it's too long (if line breaks).
 * Currently only used for `use` with annotations.
 */
function printUseModuleMember(path, options, print) {
    return group([
        path.call(print, 'nonFormattingChildren', 0), // module_access
        '::',
        ifBreak(['{', indent(line)]), // wrap with `{` if the member is too long
        indent(path.call(print, 'nonFormattingChildren', 1)), // module_access
        ifBreak([line, '}']), // trailing comma
    ]);
}
/**
 * Print `use_module_members` node. `module_identity::{member_name, member_name}`
 * Currently only used for `use` with annotations.
 */
function printUseModuleMembers(path, options, print) {
    const children = path.map(print, 'nonFormattingChildren');
    return group([
        children[0],
        '::{',
        indent(softline),
        indent(join([',', line], children.slice(1))),
        ifBreak(','), // trailing comma
        softline,
        '}',
    ]);
}
/**
 * Print the `module_identity` node. `module_identifier::module_name`.
 * Is present in the `use_module_member` and `use_module_members` nodes.
 * Currently only used for `use` with annotations.
 */
function printModuleIdentity(path, options, print) {
    return join('::', path.map(print, 'nonFormattingChildren'));
}
/**
 * Checks whether the given path is a `use` import.
 */
function isUseImport(node) {
    const firstChild = node.nonFormattingChildren[0];
    return (node.type === UseDeclaration.UseDeclaration &&
        (firstChild.type === UseDeclaration.UseModule ||
            firstChild.type === UseDeclaration.UseModuleMember ||
            firstChild.type === UseDeclaration.UseModuleMembers));
}
//# sourceMappingURL=use_declaration.js.map