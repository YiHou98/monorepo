"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.Literal = void 0;
exports.default = default_1;
exports.printByteStringLiteral = printByteStringLiteral;
exports.printBoolLiteral = printBoolLiteral;
exports.printNumLiteral = printNumLiteral;
exports.printAddressLiteral = printAddressLiteral;
exports.printHexStringLiteral = printHexStringLiteral;
/**
 * Node: `_literal_value` in the grammar.json.
 */
var Literal;
(function (Literal) {
    Literal["AddressLiteral"] = "address_literal";
    Literal["BoolLiteral"] = "bool_literal";
    Literal["NumLiteral"] = "num_literal";
    Literal["HexStringLiteral"] = "hex_string_literal";
    Literal["ByteStringLiteral"] = "byte_string_literal";
})(Literal || (exports.Literal = Literal = {}));
function default_1(path) {
    switch (path.node.type) {
        case Literal.AddressLiteral:
            return printAddressLiteral;
        case Literal.BoolLiteral:
            return printBoolLiteral;
        case Literal.NumLiteral:
            return printNumLiteral;
        case Literal.HexStringLiteral:
            return printHexStringLiteral;
        case Literal.ByteStringLiteral:
            return printByteStringLiteral;
    }
    return null;
}
/**
 * Print `byte_string_literal` node.
 */
function printByteStringLiteral(path) {
    return path.node.text;
}
/**
 * Print `bool_literal` node.
 */
function printBoolLiteral(path) {
    return path.node.text;
}
/**
 * Print `num_literal` node.
 */
function printNumLiteral(path) {
    return path.node.text;
}
/**
 * Print `address_literal` node.
 */
function printAddressLiteral(path) {
    return path.node.text;
}
/**
 * Print `hex_literal` node.
 */
function printHexStringLiteral(path) {
    return path.node.text;
}
//# sourceMappingURL=literal.js.map