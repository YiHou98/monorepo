"use strict";
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumDefinition = void 0;
exports.default = default_1;
exports.printEnumDefinition = printEnumDefinition;
exports.printEnumVariants = printEnumVariants;
exports.printVariant = printVariant;
const prettier_1 = require("prettier");
const utilities_1 = require("../utilities");
const { join, lineSuffix, indent, hardline, group, line, ifBreak } = prettier_1.doc.builders;
function default_1(path) {
    switch (path.node.type) {
        case EnumDefinition.EnumDefinition:
            return printEnumDefinition;
        case EnumDefinition.EnumVariants:
            return printEnumVariants;
        case EnumDefinition.Variant:
            return printVariant;
        // identifiers
        case EnumDefinition.EnumIdentifier:
        case EnumDefinition.VariantIdentifier:
            return utilities_1.printIdentifier;
    }
    return null;
}
var EnumDefinition;
(function (EnumDefinition) {
    EnumDefinition["EnumDefinition"] = "enum_definition";
    EnumDefinition["EnumVariants"] = "enum_variants";
    EnumDefinition["Variant"] = "variant";
    EnumDefinition["EnumIdentifier"] = "enum_identifier";
    EnumDefinition["VariantIdentifier"] = "variant_identifier";
})(EnumDefinition || (exports.EnumDefinition = EnumDefinition = {}));
/**
 * Print `enum_definition` node.
 */
function printEnumDefinition(path, _opt, print) {
    const isPublic = path.node.child(0)?.type == 'public';
    return [isPublic ? 'public ' : '', 'enum ', path.map(print, 'nonFormattingChildren')];
}
/**
 * Print `enum_variants` node.
 * List of `variant` nodes.
 */
function printEnumVariants(path, options, print) {
    if (path.node.nonFormattingChildren.length === 0) {
        return ' {}';
    }
    return group([
        ' {',
        indent(hardline),
        indent(join([',', line], path.map(print, 'nonFormattingChildren'))),
        ifBreak(','),
        hardline,
        '}',
    ]);
}
/**
 * Print `variant` node.
 * Inside:
 * - `variant_identifier`
 * - `datatype_fields` (optional)
 */
function printVariant(path, _opt, print) {
    const trailing = lineSuffix((0, utilities_1.printTrailingComment)(path, false));
    path.node.disableTrailingComment();
    return [path.map(print, 'nonFormattingChildren'), trailing];
}
//# sourceMappingURL=enum_definition.js.map